#+STARTUP: overview
#+PROPERTY: header-args :comments yes :results silent

* common
** eldoc and xref
#+BEGIN_SRC emacs-lisp
  (use-package xref
  :ensure t
  :pin gnu
  :bind (("s-r" . #'xref-find-references)
           ("C-c C-g f" . #'xref-find-definitions)
           ("C-c C-g r" . #'xref-find-references)
           ("C-c C-g b" . #'xref-go-back)
           ("s-[" . #'xref-go-back)
           ("s-]" . #'xref-go-forward)))

  (use-package eldoc
  :ensure t
  :pin gnu
  :diminish
  :bind ("s-d" . #'eldoc)
  :custom (eldoc-echo-area-prefer-doc-buffer t))
#+END_SRC

** fancy narrow
#+BEGIN_SRC emacs-lisp
  (use-package fancy-narrow
  :defer
  :ensure t
  :config
  (fancy-narrow-mode 1))
#+END_SRC

** icon
#+BEGIN_SRC emacs-lisp
  (ignore-errors (set-frame-font "JuliaMono-12"))

  (use-package all-the-icons
  :ensure t)

  (use-package all-the-icons-dired
  :ensure t
  :after all-the-icons
  :hook (dired-mode . all-the-icons-dired-mode))

  (use-package all-the-icons-ivy-rich
  :ensure t
  :after ivy-rich
  :config (all-the-icons-ivy-rich-mode 1))
#+END_SRC

** nlinum
#+BEGIN_SRC emacs-lisp
  (use-package nlinum
  :ensure t
  :config
  :bind (("C-c l" . nlinum-mode)))
#+END_SRC

** treemacs
see more, https://github.com/Alexander-Miller/treemacs
#+BEGIN_SRC emacs-lisp
  (use-package treemacs
  :ensure t
  :config
  (setq treemacs-width 20)
  :bind (
  ("C-c C-x t" . treemacs)
  ("C-c C-x e" . treemacs-edit-workspaces)
  ("C-c C-x d" . treemacs-decrease-width)
  ("C-c C-x i" . treemacs-increase-width)
  ("C-c C-x w" . treemacs-switch-workspace)))

  (use-package treemacs-projectile
  :after (treemacs projectile)
  :ensure t)

  (use-package treemacs-icons-dired
  :hook (dired-mode . treemacs-icons-dired-enable-once)
  :ensure t)

  (use-package treemacs-magit
  :after (treemacs magit)
  :ensure t)

  (use-package treemacs-persp ;;treemacs-perspective if you use perspective.el vs. persp-mode
  :after (treemacs persp-mode) ;;or perspective vs. persp-mode
  :ensure t
  :config (treemacs-set-scope-type 'Perspectives))

  (use-package treemacs-tab-bar ;;treemacs-tab-bar if you use tab-bar-mode
  :after (treemacs)
  :ensure t
  :config (treemacs-set-scope-type 'Tabs))

  (use-package all-the-icons
  :ensure t)

  (use-package all-the-icons-dired
  :ensure t
  :after all-the-icons
  :hook (dired-mode . all-the-icons-dired-mode))
#+END_SRC

** dired sidebar
see more,https://github.com/jojojames/dired-sidebar
#+BEGIN_SRC emacs-lisp
  (use-package dired-sidebar
  :bind (("C-x C-n" . dired-sidebar-toggle-sidebar))
  :ensure t
  :commands (dired-sidebar-toggle-sidebar)
  :init
  (add-hook 'dired-sidebar-mode-hook
            (lambda ()
              (unless (file-remote-p default-directory)
                (auto-revert-mode))))
  :config
  (push 'toggle-window-split dired-sidebar-toggle-hidden-commands)
  (push 'rotate-windows dired-sidebar-toggle-hidden-commands)

  (setq dired-sidebar-subtree-line-prefix "__")
  (setq dired-sidebar-theme 'vscode)
  (setq dired-sidebar-use-term-integration t)
  (setq dired-sidebar-use-custom-font t))
#+END_SRC

** vterm
#+BEGIN_SRC emacs-lisp
  (use-package vterm
  :ensure t
  :bind ("C-x g" . vterm))
#+END_SRC

** consult
#+BEGIN_SRC emacs-lisp
  (use-package consult
  :ensure t
  :config
  (defun pt/yank-pop ()
    "As pt/yank, but calling consult-yank-pop."
    (interactive)
    (let ((point-before (point)))
      (consult-yank-pop)
      (indent-region point-before (point))))

  :bind (("C-c i"     . #'consult-imenu)
         ("C-c r"     . #'consult-recent-file)
         ("C-c y"     . #'pt/yank-pop)
         ("C-c R"     . #'consult-bookmark)
         ("C-c `"     . #'consult-flymake)
         ("C-c h"     . #'consult-ripgrep)
         ("C-x C-f"   . #'find-file)
         ("C-c C-h a" . #'consult-apropos)
         )
  :custom
  (completion-in-region-function #'consult-completion-in-region)
  (xref-show-xrefs-function #'consult-xref)
  (xref-show-definitions-function #'consult-xref)
  (consult-project-root-function #'deadgrep--project-root) ;; ensure ripgrep works
  )
#+END_SRC

** marginalia
#+BEGIN_SRC emacs-lisp
  (use-package marginalia
  :ensure t
  :init (marginalia-mode 1))
#+END_SRC

** orderless
#+BEGIN_SRC emacs-lisp
  (use-package orderless
  :ensure t
  :custom
  (completion-styles '(orderless basic))
  (completion-category-overrides '((file (styles basic partial-completion)))))
#+END_SRC

** crtlf
#+BEGIN_SRC emacs-lisp
  (use-package ctrlf
  :ensure t
  :init (ctrlf-mode 1))
#+END_SRC

** prescient
simple but effective sorting and filtering for Emacs
https://github.com/radian-software/prescient.el
#+BEGIN_SRC emacs-lisp
  (use-package prescient
    :ensure t)

#+END_SRC

** vertico
see more, https://github.com/minad/vertico
#+BEGIN_SRC emacs-lisp
  (use-package vertico
  :after prescient
  :ensure t
  :config
  (vertico-mode)
  (vertico-mouse-mode)
  :custom
  (vertico-count 22)
  (vertico-cycle t)
  :bind (:map vertico-map
              ("C-v e" . #'vertico-quick-exit)
              ("C-v c" . #'vertico-quick-insert)
              ("C-v w" . #'exit-minibuffer)
              ("C-v i" . #'vertico-insert)
              ("C-v v" . #'vertico)
              ("C-v d" . #'vertico-directory-delete-char)))

  (use-package vertico-prescient
    :after vertico
    :ensure t)
#+END_SRC

** ace 
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
  :ensure t
  :config 
  (setq aw-scope 'frame)
  (setq aw-background nil)
  (global-set-key (kbd "C-c a") 'ace-window)
  (ace-window-display-mode)
  (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)))

  (use-package ace-jump-mode
  :ensure t
  :bind ("C-." . ace-jump-mode))

  (use-package ace-flyspell
  :ensure t
  :bind
  (:map flyspell-mode-map
      ("C-M-i" . ace-flyspell-correct-word)))
#+END_SRC

** ivy
#+BEGIN_SRC emacs-lisp
  (use-package ivy
  :after prescient
  :ensure t
  :diminish (ivy-mode)
  :bind (("C-x b" . ivy-switch-buffer))
  :config
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq ivy-count-format "%d/%d ")
  (setq ivy-display-style 'fancy))

  (use-package ivy-prescient
    :after ivy
    :ensure t)

  (use-package swiper
  :ensure t
  :bind (("C-s" . swiper-isearch)
           ("C-x C-f" . counsel-find-file))
  :config
  (progn
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-display-style 'fancy)
    (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
    ))
#+END_SRC

** flycheck
See more, https://www.flycheck.org/en/latest/
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
  :ensure t
  :config
 ;; Disable the error indicator on the fringe
  (setq flycheck-indication-mode nil)

  ;; Disable automatic syntax check on new line
  (setq flycheck-syntax-automatically '(save
  idle-change
  mode-enable))

  ;; Immediate syntax checking quite annoying. Slow it down a bit.
  (setq flycheck-idle-change-delay 2.0)

  ;; Customize faces Colors are copied from solarized definitions

  (set-face-attribute 'flycheck-warning nil
  :background "#b58900"
  :foreground "#4a5d4b"
  :underline nil)

  (set-face-attribute 'flycheck-error nil
  :background "#dc322f"
  :foreground "#4a5d4b"
  :underline nil)

  (global-flycheck-mode t))
#+END_SRC

** yasnippet
see more, https://github.com/joaotavora/yasnippet
develop/config, https://joaotavora.github.io/yasnippet/snippet-development.html
#+BEGIN_SRC emacs-lisp
  (setq-default abbrev-mode 1)

  (use-package yasnippet
  :ensure t
  :config
  (setq yas-snippet-dirs '("~/.emacs.d/snippets"))
  (yas-global-mode 1))

  ;; a collection of yasnippet snippets for many languages
  (use-package yasnippet-snippets
  :after yasnippet
  :ensure t)

  (use-package ivy-yasnippet
  :after (ivy yasnippet)
  :ensure t
  :bind ("C-c w" . ivy-yasnippet))
#+END_SRC

** flyspell
see more, http://www-sop.inria.fr/members/Manuel.Serrano/flyspell/flyspell.html
#+BEGIN_SRC emacs-lisp
  (use-package flyspell
  :ensure t
  :hook
  (prog-mode . flyspell-prog-mode)
  (text-mode . flyspell-mode))
#+END_SRC

** auto revert
#+BEGIN_SRC emacs-lisp
  (use-package autorevert
  :ensure t
  :config
  (global-auto-revert-mode 1))

  (use-package electric
  :ensure t
  :defer
  :config
  (electric-indent-mode 1))

  (use-package savehist
  :ensure t
  :defer
  :config
  (savehist-mode 1))
#+END_SRC

** goto
#+BEGIN_SRC emacs-lisp
  (use-package goto-line-preview
  :ensure t
  :bind (("C-c g". goto-line-preview)))
#+END_SRC

** smartparent
#+BEGIN_SRC emacs-lisp
  (use-package smartparens
  :ensure t
  :hook ((prog-mode . smartparens-mode)
           (emacs-lisp-mode . smartparens-strict-mode))
  :init
  (setq sp-base-key-bindings 'sp)
  :config
  (define-key smartparens-mode-map [M-backspace] #'backward-kill-word)
  (define-key smartparens-mode-map [M-S-backspace] #'sp-backward-unwrap-sexp)
  (require 'smartparens-config))
#+END_SRC

** ws-butler
#+BEGIN_SRC emacs-lisp
  (use-package ws-butler
  :ensure t
  :hook ((text-mode . ws-butler-mode)
         (prog-mode . ws-butler-mode)))
#+END_SRC

** dashboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
  :custom
  (dashboard-banner-logo-title "With Great Power Comes Great Responsibility!")
  (dashboard-center-content t)
  (dashboard-items '((agenda)
                     (projects . 5)))
  (dashboard-projects-switch-function 'counsel-projectile-switch-project-by-name)
  (dashboard-set-file-icons t)
  (dashboard-set-footer nil)
  (dashboard-set-heading-icons t)
  (dashboard-set-navigator t)
  (dashboard-startup-banner 'logo)
  :config (dashboard-setup-startup-hook))
#+END_SRC

** flymake
#+BEGIN_SRC emacs-lisp
  (use-package flymake
  :ensure nil
  :init
  (setq-default flymake-no-changes-timeout 1)
  :config
  (setq flymake-mode-line-format
        ;; the default mode line lighter takes up an unnecessary amount of
        ;; space, so make it shorter
        '(" " flymake-mode-line-exception flymake-mode-line-counters)))
#+END_SRC

** RGB Color
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
  :ensure t
  :bind
  (("C-c p" . rainbow-mode)))
#+END_SRC
