#+STARTUP: overview
#+PROPERTY: header-args :comments yes :results silent

* programming
** lsp
#+BEGIN_SRC emacs-lisp
  (setq lsp-log-io nil) ;; Don't log everything = speed
  (setq lsp-keymap-prefix "C-c j")
  (setq lsp-restart 'auto-restart)
  (setq lsp-ui-sideline-show-diagnostics t)
  (setq lsp-ui-sideline-show-hover nil)
  (setq lsp-ui-sideline-show-code-actions t)
  (setq lsp-ui-sideline-enable nil)


  (use-package lsp-mode
  :ensure t
  :commands lsp
  :diminish lsp-mode
  :bind
  ("M-." . 'lsp-find-definition)
  ("M-t" . 'lsp-find-type-definition)
  ("M-?" . 'lsp-find-references))

  (use-package lsp-treemacs
  :commands lsp-treemacs-errors-list)

  ;; https://github.com/emacs-lsp/dap-mode
;  (use-package dap-mode
;  :defer
;  :commands (dap-debug dap-debug-edit-template))

  (use-package lsp-ui
  :hook (lsp-mode . lsp-ui-mode)
  :ensure t
  :config
  (lsp-ui-doc-show))

#+END_SRC

** rust
#+BEGIN_SRC emacs-lisp
  (use-package rust-mode
  :defer
  :ensure t
 ; :hook (rust-mode . lsp)
  :bind
  ("C-c e" . rust-run)
  ("C-c t" . rust-test)
  ("C-c b" . cargo-process-build)
  :config

  (setq rust-format-on-save t)
  (setq lsp-rust-server 'rust-analyzer))

  (use-package cargo
  :defer
  :ensure t
  :hook (rust-mode . cargo-minor-mode)
  :diminish cargo-minor-mode
  :bind (
    ("C-x j r" . cargo-process-run)
    ("C-x j b" . cargo-process-build)
    ("C-x j a" . cargo-process-add)
    ("C-x j t" . cargo-process-test)
    ("C-x j c" . cargo-process-clippy)
    ("C-x j l" . cargo-process-clean)
    ()))

  (use-package flycheck-rust
  :defer
  :ensure t
  :config (add-hook 'flycheck-mode-hook #'flycheck-rust-setup))

  (use-package racer
  :after rust-mode
  :ensure t
  :diminish racer-mode
  :hook (rust-mode . racer-mode)
  :bind
  ("M-j" . racer-find-definition)
  ;; (:map racer-mode-map ("M-." . #'xref-find-definitions))
  (:map racer-mode-map ("M-." . nil)))
#+END_SRC

** toml
#+BEGIN_SRC emacs-lisp
  (use-package toml-mode
  :defer
  :ensure t
  :config
  (add-hook 'toml-mode-hook (lambda() (setq tab-width 2))))
#+END_SRC

** markdown
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
  :defer
  :ensure t
  :mode (("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode)
         ("\\.mdx\\'" . markdown-mode)))
#+END_SRC

** go
#+BEGIN_SRC emacs-lisp
  (use-package go-mode
  :defer
  :ensure t
  :mode "\\.go\\'"
  :config
  (defun my/go-mode-setup ()
  "Basic Go mode setup."
    (add-hook 'before-save-hook #'lsp-format-buffer t t)
    (add-hook 'before-save-hook #'lsp-organize-imports t t))
  (add-hook 'go-mode-hook #'my/go-mode-setup)
  (add-hook 'go-mode-hook (lambda() (setq tab-width 4)))
  :hook
  (go-mode . lsp))

#+END_SRC

** yaml
#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
  :defer
  :ensure t
  :mode (("\\.yml\\'" . yaml-mode)
           ("\\.yaml\\'" . yaml-mode))
  :init
    (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode)))
#+END_SRC

** json
#+BEGIN_SRC emacs-lisp
  (use-package json-mode
  :defer
  :ensure t)
#+END_SRC

** docker
#+BEGIN_SRC emacs-lisp
  (use-package dockerfile-mode
  :defer
  :ensure t)
#+END_SRC

** irony
A C/C++ minor mode for Emacs powered by libclang
see more, https://github.com/Sarcasm/irony-mode
#+BEGIN_SRC emacs-lisp
  (use-package irony
  :defer
  :ensure t
  :config
  (progn
    (add-hook 'c++-mode-hook 'irony-mode)
    (add-hook 'c-mode-hook 'irony-mode)
    (add-hook 'objc-mode-hook 'irony-mode)

    (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)
  ))

  (use-package flycheck-irony
  :defer
  :after (irony flycheck)
  :ensure t)
#+END_SRC
