#+STARTUP: overview
#+PROPERTY: header-args :comments yes :results silent

* pre load
** install and configure Quelpa
#+BEGIN_SRC emacs-lisp

(unless (package-installed-p 'quelpa)
  (with-temp-buffer
    (url-insert-file-contents "https://raw.githubusercontent.com/quelpa/quelpa/master/quelpa.el")
    (eval-buffer)
    (quelpa-self-upgrade)))

#+END_SRC

** pre config
#+BEGIN_SRC emacs-lisp

  (require 'hl-line)
  (add-hook 'prog-mode-hook #'hl-line-mode)
  (add-hook 'text-mode-hook #'hl-line-mode)
  
  (use-package bind-key)
  (setq gc-cons-threshold 100000000)
  (set-charset-priority 'unicode)
  (prefer-coding-system 'utf-8-unix)
  (delete-selection-mode t)
  (column-number-mode)
  (savehist-mode)

  (set-language-environment "UTF-8")
  (set-default-coding-systems 'utf-8)
  (setq
   ;; No need to see GNU agitprop.
   inhibit-startup-screen t
   ;; Double-spaces after periods is morally wrong.
   sentence-end-double-space nil
   ;; Never ding at me, ever.
   ring-bell-function 'ignore
   ;; Save existing clipboard text into the kill ring before replacing it.
   save-interprogram-paste-before-kill t
   ;; Prompts should go in the minibuffer, not in a GUI.
   use-dialog-box nil
   ;; Fix undo in commands affecting the mark.
   mark-even-if-inactive nil
   ;; Let C-k delete the whole line.
   kill-whole-line t
   ;; search should be case-sensitive by default
   case-fold-search nil
   ;; no need to prompt for the read command _every_ time
   compilation-read-command nil
   ;; scroll to first error
   compilation-scroll-output 'first-error
   ;; accept 'y' or 'n' instead of yes/no
   ;; the documentation advises against setting this variable
   ;; the documentation can get bent imo
   use-short-answers t
   ;; eke out a little more scrolling performance
   fast-but-imprecise-scrolling t
   ;; prefer newer elisp files
   load-prefer-newer t
   ;; when I say to quit, I mean quit
   confirm-kill-processes nil
   ;; if native-comp is having trouble, there's not very much I can do
   native-comp-async-report-warnings-errors 'silent
   ;; unicode ellipses are better
   truncate-string-ellipsis "â€¦"
   ;; I want to close these fast, so switch to it so I can just hit 'q'
   help-window-select t
   ;; this certainly can't hurt anything
   delete-by-moving-to-trash t
   ;; keep the point in the same place while scrolling
   scroll-preserve-screen-position t
   ;; more info in completions
   completions-detailed t
   ;; highlight error messages more aggressively
   next-error-message-highlight t
   ;; don't let the minibuffer muck up my window tiling
   read-minibuffer-restore-windows t
   ;; scope save prompts to individual projects
   save-some-buffers-default-predicate 'save-some-buffers-root
   ;; don't keep duplicate entries in kill ring
   kill-do-not-save-duplicates t
   )

  ;; Never mix tabs and spaces. Never use tabs, period.
  ;; We need the setq-default here because this becomes
  ;; a buffer-local variable when set.
  (setq-default indent-tabs-mode nil)

#+END_SRC
** Quelpa-use-package
#+BEGIN_SRC emacs-lisp

(quelpa
 '(quelpa-use-package
   :fetcher git
   :url "git@github.com:quelpa/quelpa-use-package.git"))
(require 'quelpa-use-package)

#+END_SRC

** set backup folder
#+BEGIN_SRC emacs-lisp

  ;; store all backup and autosave files in the tmp dir
  (setq backup-directory-alist
     `((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms
     `((".*" ,temporary-file-directory t)))

#+END_SRC

** default config for ispell
#+BEGIN_SRC emacs-lisp

  (setq-default ispell-program-name "aspell")
  (ispell-change-dictionary "american" t)

#+END_SRC

** helpful
#+BEGIN_SRC emacs-lisp

  (use-package s
  :ensure t)

  (use-package dash
  :ensure t)

#+END_SRC

* tree-sitter
#+BEGIN_SRC emacs-lisp
  (use-package tree-sitter
  :ensure t
  :defer
  :hook ((rust-mode . tree-sitter-mode) (go-mode . tree-sitter-mode)))

  (use-package tree-sitter-langs
  :ensure t
  :defer)

#+END_SRC

* prodigy
#+BEGIN_SRC emacs-lisp

  (use-package prodigy
  :ensure t
  :bind (("C-c 8" . #'prodigy)
           :map prodigy-view-mode-map
           ("$" . #'end-of-buffer))
  :custom (prodigy-view-truncate-by-default t)
  :config
  ;;  (load "~/.emacs.d/services.el" 'noerror))
    (prodigy-define-tag
    :name 'pulumi
    :ready-message "Pulumi!!!")
    (prodigy-define-tag
     :name 'operator
     :ready-message "Matrixone Operator!!!")

    (prodigy-define-service
     :name "pulumi up"
     :command "pulumi"
     :args '("up", "--yes")
     :cwd "~/Documents/matrixone-operator/"
     :tags '(pulumi))
  )

#+END_SRC

* completion and input
#+BEGIN_SRC emacs-lisp

  (use-package vertico
    :ensure t
    :config
    (vertico-mode)
    (vertico-mouse-mode)
    :custom
    (vertico-count 22)
    (vertico-cycle t)
    :bind (:map vertico-map
                ("C-v e" . #'vertico-quick-exit)
                ("C-v c" . #'vertico-quick-insert)
                ("C-v w" . #'exit-minibuffer)
                ("C-v i" . #'vertico-insert)
                ("C-v v" . #'vertico)
                ("C-v d" . #'vertico-directory-delete-char)))

  (use-package consult
    :ensure t
    :config
    (defun pt/yank-pop ()
      "As pt/yank, but calling consult-yank-pop."
      (interactive)
      (let ((point-before (point)))
        (consult-yank-pop)
        (indent-region point-before (point))))

    :bind (("C-c i"     . #'consult-imenu)
           ("C-c b"     . #'consult-buffer)
           ("C-x b"     . #'consult-buffer)
           ("C-c r"     . #'consult-recent-file)
           ("C-c y"     . #'pt/yank-pop)
           ("C-c R"     . #'consult-bookmark)
           ("C-c `"     . #'consult-flymake)
           ("C-c h"     . #'consult-ripgrep)
           ("C-x C-f"   . #'find-file)
           ("C-c C-h a" . #'consult-apropos)
           )
    :custom
    (completion-in-region-function #'consult-completion-in-region)
    (xref-show-xrefs-function #'consult-xref)
    (xref-show-definitions-function #'consult-xref)
    (consult-project-root-function #'deadgrep--project-root) ;; ensure ripgrep works
    )

  (use-package marginalia
    :ensure t
    :config (marginalia-mode))

  (use-package orderless
    :ensure t
    :custom (completion-styles '(orderless basic)))

  (use-package ctrlf
    :ensure t
    :config (ctrlf-mode))

  (use-package prescient
    :ensure t
    :config (prescient-persist-mode))

#+END_SRC
* Interface tweaks
Modify interface
#+BEGIN_SRC emacs-lisp

  (setq inhibit-startup-message t)
  (tool-bar-mode -1)
  (fset 'yes-or-no-p 'y-or-n-p)
  (global-set-key (kbd "<f5>") 'revert-buffer)

#+END_SRC

* Org-mode
Config org-mode, see more https://orgmode.org/
#+BEGIN_SRC emacs-lisp

  (use-package org
  :ensure t
  :pin org)

  ;; this config for linux
  ;; (setenv "BROWSER" "chromium-browser")
  (use-package org-bullets
  :ensure t
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

  ;; this config for linux
  ;; (setq org-file-apps (append '(
  ;; ("\\.pdf\\'" . "evince %s")
  ;; ("\\.x?html?\\'" . "/usr/bin/chromium-browser %s")
  ;; ) org-file-apps ))`


  (setq org-agenda-files (list "~/Dropbox/Org/schedule.org"
			       "~/.emacs.d/org/course.org"
			       "~/.emacs.d/org/exercise.org"
			       "~/.emacs.d/org/gtd.org"
			       "~/.emacs.d/org/social.org"
			       "~/.emacs.d/org/project.org"))

  ;; Multiple keyword sets in one file
  (setq org-todo-keywords
    '((sequence "TODO" "IN-PROGRESS" "WAIT" "|" "DONE")
      (sequencee "REPORT" "BUG" "KNOWNCAUSE" "|" "FIXED")
      (sequence "|" "CANCELED")))

  (setq org-todo-keyword-faces 
    '(("TODO" . (:foreground "orange" :weight bold)) 
      ("REPORT" . (:foreground "orange" :weight bold))
      ("IN-PROGRESS" . "cyan")
      ("BUG" . "cyan")
      ("KNOWNCAUSE" . "cyan")
      ("DONE" . "green")
      ("FIXED" . "green")
      ("CANCELED" . (:foreground "blue" :weight bold))))

  (setq org-tag-alist '((:startgroup . nil)
			("@work" . ?w)
			("@home" . ?h)
			("@course" . ?c)
			("@social" . ?s)
			(:endgroup . nil)
			("laptop" . ?l)
			("pc" . ?p)))



#+END_SRC

* Themes and Modeline 
Editor themes, see more https://github.com/hlissner/emacs-doom-themes
#+BEGIN_SRC emacs-lisp

  (use-package color-theme-modern
  :ensure t)
  (use-package doom-themes
  :ensure t)
  (use-package doom-modeline
  :ensure t)

  (require 'doom-modeline)
  (doom-modeline-init)

  (load-theme 'doom-zenburn  t)

  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)

  ;; Enable custom neotree (all-the-icons must be installed!)
  ;; (doom-themes-neotree-config)

  ;; or for treemacs users
  (setq doom-themes-treemacs-theme "doom-colors") ; use the colorful treemacs theme
  (doom-themes-treemacs-config)

  ;; corrects (and improves) org-mode's native fontification
  (doom-themes-org-config)

#+END_SRC

* Treemacs
A tree layout file explorer for emacs, see more https://github.com/Alexander-Miller/treemacs
#+BEGIN_SRC emacs-lisp

  (ignore-errors (set-frame-font "JuliaMono-12"))

  (use-package all-the-icons
  :ensure t)

  (use-package all-the-icons-dired
  :ensure t
  :after all-the-icons
  :hook (dired-mode . all-the-icons-dired-mode))

  (use-package all-the-icons-ivy-rich
  :ensure t
  :after ivy-rich
  :config (all-the-icons-ivy-rich-mode 1))

  (use-package treemacs
  :ensure t
  :bind ("C-c C-x t" . treemacs))

#+END_SRC

* Undo tree
Visulize the Undo trace, see more https://elpa.gnu.org/packages/undo-tree.html 
Document: http://www.dr-qubit.org/undo-tree/undo-tree.txt
#+BEGIN_SRC emacs-lisp


  (use-package undo-tree
  :ensure t
  :init
  (global-undo-tree-mode 1)
  (global-set-key (kbd "C-z") 'undo)
  :config
  (setq undo-tree-auto-save-history t)
  (setq undo-tree-history-directory-alist 
	`(("." . ,temporary-file-directory))))

#+END_SRC

* Ace windows
Fow switching window easily
#+BEGIN_SRC emacs-lisp

  (use-package ace-window
    :ensure t
    :config 
     (setq aw-scope 'frame)
     (setq aw-background nil)
     (global-set-key (kbd "C-c a") 'ace-window)
     (ace-window-display-mode)
     (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)))

  (use-package ace-jump-mode
  :ensure t
  :bind ("C-." . ace-jump-mode))

  (use-package ace-flyspell
  :ensure t
  :bind
  (:map flyspell-mode-map
      ("C-M-i" . ace-flyspell-correct-word)))

#+END_SRC

* Which key
Displays available keybindings in popup, see more https://github.com/justbur/emacs-which-key
#+BEGIN_SRC emacs-lisp

  (use-package which-key
    :ensure t
    :config
    (which-key-mode))

#+END_SRC

* Ibuffer 
Buffer managerment, see more https://www.emacswiki.org/emacs/IbufferMode
#+BEGIN_SRC emacs-lisp

  (global-set-key (kbd "C-x C-b") 'ibuffer)

  (setq ibuffer-saved-filter-groups
    (quote (("defullt"
      ("dired" (mode . dired-mode))
      ("org" (mode . "^.*org$"))
      ("shell" (or (mode . eshell-mode) (mode . shell-mode)))
      ("programming" (or
      (mode . c++-mode)))
      ("emacs" (or
	(mode . "^\\*scratch\\*$")
	(mode . "^\\*Message\\*$")))
  ))))

  (add-hook 'ibuffer-mode-hook
    (lambda()
      (ibuffer-auto-mode 1)
      (ibuffer-switch-to-saved-filter-groups "default")))

  ;; Don't show filter groups if there are no buffers in that group
  (setq ibuffer-show-empty-filter-groups nil)

  ;; Don't ask for confirmation to delete marked buffers
  (setq ibuffer-expert t)

#+END_SRC

* Swiper/Ivy/CounselSwiper
gives us a really efficient incremental search with regular expressions
and Ivy / Counsel replace a lot of ido or helms completion functionality
See more Swiper: https://github.com/abo-abo/swiper
#+BEGIN_SRC emacs-lisp

  (use-package counsel
    :ensure t
    :bind
    (("M-y" . counsel-yank-pop)
    :map ivy-minibuffer-map
    ("M-y" . ivy-next-line)))

  (use-package counsel-ag-popup
  :ensure t
  :bind
  (:map gpolonkai/pers-map
   ("s" . counsel-ag-popup)))

  (use-package counsel-projectile
  :ensure t
  :custom
  (projectile-completion-system 'ivy)
  :config
  (counsel-projectile-mode))

  (use-package ivy
    :ensure t
    :diminish (ivy-mode)
    :bind (("C-x b" . ivy-switch-buffer))
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "%d/%d ")
    (setq ivy-display-style 'fancy))

  (use-package ivy-yasnippet
  :ensure t
  :after yasnippet
  :bind
  (("C-c y" . ivy-yasnippet)))


  (use-package swiper
    :ensure t
    :bind (("C-s" . swiper-isearch)
	   ("C-r" . swiper-isearch)
	   ("C-c C-r" . ivy-resume)
	   ("M-x" . counsel-M-x)
	   ("C-x C-f" . counsel-find-file))
    :config
    (progn
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (setq ivy-display-style 'fancy)
      (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
      ))

#+END_SRC

* Better shell
This package simplifies shell management and sudo access 
by providing the following commands
See more: https://github.com/killdash9/better-shell
#+BEGIN_SRC emacs-lisp

  (use-package better-shell
  :ensure t
  :bind (("C-c s" . better-shell-shell) 
	 ("C-c r" . better-shell-remote-open)))

#+END_SRC

* Origami
A text folding minor mode for emacs
See more: https://github.com/gregsexton/origami.el
#+BEGIN_SRC emacs-lisp

  (use-package origami
  :ensure t
  :bind (
    ("C-c o s" . origami-mode)
    ("C-c o t" . origame-origami-toggle-node)
    ("C-c o c" . origami-close-node)
    ("C-c o o" . origami-open-node)
    ("C-c o u" . origami-undo)
    ("C-c o g" . origami-open-all-nodes)
    ("C-c o r" . origami-close-all-nodes) 
  ))

#+END_SRC

* Linum
Set line number
#+BEGIN_SRC emacs-lisp

  (use-package linum
  :ensure t
  :config
  :bind (("C-c l" . linum-mode))
  )

#+END_SRC

* Goto
Use goto-line-preview and goto chg
See more:
goto-line-preview: https://github.com/jcs-elpa/goto-line-preview
goto-chg: https://www.emacswiki.org/emacs/GotoChg
#+BEGIN_SRC emacs-lisp

  (use-package goto-chg
  :ensure t
  :config (setq tab-width 4)
  :bind (("C-c g c" .  goto-last-change)
	 ("C-c g r" . goto-last-chanage-reverse)))

  (use-package goto-line-preview
  :ensure t
  :bind (("C-c g p". goto-line-preview)))

#+END_SRC

* Company
Modular in-buffer completion framework for Emacs
See more: http://company-mode.github.io/
#+BEGIN_SRC emacs-lisp

  (use-package company
  :ensure t
  :hook (emacs-lisp-mode . company-mode)
  :config
  (setq company-idle-delay 0)
  (setq company-minimum-prefix-length 3)
  (global-company-mode t))

  (use-package company-prescient
  :ensure t
  :after company
  :config
  (company-prescient-mode))

  (use-package company-irony
  :ensure t)

  (use-package company-shell
  :ensure t)

  (use-package company-c-headers
  :ensure t)

  (use-package company-emoji
  :ensure t
  :after company
  :config
  (add-to-list 'company-backends 'company-emoji))

#+END_SRC

* Flycheck
A modern on-the-fly syntax checking extension
See more, https://www.flycheck.org/en/latest/
#+BEGIN_SRC emacs-lisp

  (use-package flycheck
  :ensure t
  :init 
  :config
  ;; Disable the error indicator on the fringe
  (setq flycheck-indication-mode nil)

  ;; Disable automatic syntax check on new line
  (setq flycheck-syntax-automatically '(save 
  idle-change 
  mode-enable))

  ;; Immediate syntax checking quite annoying. Slow it down a bit.
  (setq flycheck-idle-change-delay 2.0)

  ;; Customize faces (Colors are copied from solarized definitions

  (set-face-attribute 'flycheck-warning nil
  :background "#b58900"
  :foreground "#262626"
  :underline nil)

  (set-face-attribute 'flycheck-error nil
  :background "dc322f"
  :foreground "#262626"
  :underline nil)

  (global-flycheck-mode t))

  (use-package flycheck-irony
  :ensure t)

;  (use-package flycheck-golangci-lint
;  :ensure t
;  :config
;  (setq flycheck-golangci-lint-deadline "1m")
;  (setq flycheck-golangci-lint-config "~/.emacs.d/.golangci.yml")
;  :hook (go-mode . flycheck-golangci-lint-setup))

#+END_SRC  

* Yasnippet
A template system
See more, https://github.com/joaotavora/yasnippet
#+BEGIN_SRC emacs-lisp
  (setq-default abbrev-mode 1)

  (use-package yasnippet
  :defer 2
  :init
  (bind-key "C-c y" 'yas-about)
  :config
  (setq yas-snippet-dirs '("~/.emacs.d/snippets"))
  (yas-global-mode 1))

  ;; a collection of yasnippet snippets for many languages
  (use-package yasnippet-snippets
  :defer)

  (use-package ivy-yasnippet
  :bind ("C-c y" . ivy-yasnippet))

#+END_SRC

* lsp mode
#+BEGIN_SRC emacs-lisp
(setq lsp-log-io nil) ;; Don't log everything = speed
(setq lsp-keymap-prefix "C-c j")
(setq lsp-restart 'auto-restart)
(setq lsp-ui-sideline-show-diagnostics t)
(setq lsp-ui-sideline-show-hover t)
(setq lsp-ui-sideline-show-code-actions t)

  (use-package lsp-mode
  :ensure t
  :commands lsp
  :diminish lsp-mode
  :bind
  ("M-." . 'lsp-find-definition)
  ("M-t" . 'lsp-find-type-definition)
  ("M-?" . 'lsp-find-references))

  (use-package lsp-ui
  :ensure t)

#+END_SRC

* languages
** go mode
#+BEGIN_SRC emacs-lisp

  (use-package go-mode
  :ensure t
  :mode "\\.go\\'"
  :config
  (defun my/go-mode-setup ()
    "Basic Go mode setup."
  (add-hook 'before-save-hook #'lsp-format-buffer t t)
  (add-hook 'before-save-hook #'lsp-organize-imports t t))
  (add-hook 'go-mode-hook #'my/go-mode-setup)
  :hook
  (go-mode . lsp))

#+END_SRC
** rust mode  
#+BEGIN_SRC emacs-lisp

  (use-package rust-mode
  :ensure t
  :hook (rust-mode . lsp)
  :bind
  ("C-c g" . rust-run)
  ("C-c t" . rust-test)
  ("C-c b" . cargo-process-build)
  :config
  (setq rust-format-on-save t)
  (setq lsp-rust-server 'rust-analyzer))

  (use-package cargo
  :defer
  :hook (rust-mode . cargo-minor-mode)
  :diminish cargo-minor-mode)

  (use-package flycheck-rust
  :ensure t
  :config (add-hook 'flycheck-mode-hook #'flycheck-rust-setup))

  (use-package racer
  :after rust-mode
  :diminish racer-mode
  :hook (rust-mode . racer-mode)
  :bind
  ("M-j" . racer-find-definition)
  ;; (:map racer-mode-map ("M-." . #'xref-find-definitions))
  (:map racer-mode-map ("M-." . nil)))

#+END_SRC

** toml mode
#+BEGIN_SRC emacs-lisp

  (use-package toml-mode
  :defer)

#+END_SRC

** eldoc and xref
#+BEGIN_SRC emacs-lisp

(use-package xref
:ensure t
:pin gnu
:bind (("s-r" . #'xref-find-references)
         ("C-<down-mouse-1>" . #'xref-find-definitions)
         ("C-S-<down-mouse-1>" . #'xref-find-references)
         ("C-<down-mouse-2>" . #'xref-go-back)
         ("s-[" . #'xref-go-back)
         ("s-]" . #'xref-go-forward)))

(use-package eldoc
:ensure t
:pin gnu
:diminish
:bind ("s-d" . #'eldoc)
:custom (eldoc-echo-area-prefer-doc-buffer t))
  
#+END_SRC
** yaml mode
#+BEGIN_SRC emacs-lisp

(use-package yaml-mode
:ensure t
:mode (("\\.yml\\'" . yaml-mode)
         ("\\.yaml\\'" . yaml-mode))
:init
  (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode)))

#+END_SRC
** json mode
#+BEGIN_SRC emacs-lisp

  (use-package json-mode
  :ensure t)

#+END_SRC
** markdown mode
#+BEGIN_SRC emacs-lisp

  (use-package markdown-mode
  :ensure t
  :mode (("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode)))

#+END_SRC
** dockerfile mode
#+BEGIN_SRC emacs-lisp

  (use-package dockerfile-mode
  :ensure t)

#+END_SRC

** fish shell
#+BEGIN_SRC emacs-lisp
  
  (use-package vterm
  :defer)

  (use-package fish-mode
  :ensure t
  :hook
  (fish-mode . (lambda () (add-hook 'before-save-hook 'fish_indent-before-save))))


#+END_SRC
** web development
#+BEGIN_SRC emacs-lisp

  (use-package web-mode
  :mode "\\.html?\\'"
  :custom
  (web-mode-enable-auto-indentation nil)
  (web-mode-enable-engine-detection t))

  (use-package emmet-mode
  :custom
  (emmet-self-closing-tag-style "")
  :hook
  (web-mode . emmet-mode)
  (css-mode . emmet-mode))

  (use-package js2-mode
  :pin melpa-stable
  :mode (("\\.js\\'" . js2-mode)
         ("\\.jsx\\'" . js2-mode)))

  (use-package typescript-mode
  :pin melpa-stable
  :mode (("\\.ts\\'" . typescript-mode)
         ("\\.tsx\\'" . typescript-mode)))

  (use-package less-css-mode
  :mode "\\.less\\'")

  (use-package sass-mode
  :mode "\\.sass\\'")

#+END_SRC
* Magit
Git plugin
See more, https://magit.vc/
#+BEGIN_SRC emacs-lisp

  (use-package magit
  :ensure t
  :diminish magit-autorevert-mode
  :diminish auto-revert-mode
  :config
  (defun pt/commit-hook () (set-fill-column 80))
  (add-hook 'git-commit-setup-hook #'pt/commit-hook)
  (add-to-list 'magit-no-confirm 'stage-all-changes)
  :bind (
    ("C-c x c" . magit-commit)
    ("C-c x p" . magit-push)
    ("C-c x l" . magit-log)
    ("C-c x n" . magit-clone)
    ("C-c x b" . magit-branch-create)
    ("C-c x d" . magit-branch-delete)
    ("C-c x r" . magit-branch-reset)
    ("C-c x o" . magit-checkout)
    ("C-c x s" . magit-stash)
    ("C-c x g" . magit-status)
    ("C-c x u" . magit-pull)
    ("C-c x y" . magit-branch-checkout)
  ))

  (use-package forge
  :ensure t
  :after magit)

  ;; hack to eliminate weirdness
  (unless (boundp 'bug-reference-auto-setup-functions)
    (defvar bug-reference-auto-setup-functions '()))


  (use-package libgit 
  :ensure t
  :after magit)
  (use-package magit-libgit
  :ensure t
  :after (magit libgit))


  (use-package git-messenger
  :ensure t
  :bind ("C-c x m" . git-messenger:popup-message)
  :config
  (setq git-messenger:show-detail t
        git-messenger:use-magit-popup t))

  (use-package git-timemachine
  :ensure t
  :bind ("C-c x t" . git-timemachine))


#+END_SRC

* Auctex
TeX plugin
See more, https://www.gnu.org/software/auctex/
#+BEGIN_SRC emacs-lisp

  (use-package tex-site
  :defer t
  :ensure auctex
  :config
  (setq TeX-auto-save t))

#+END_SRC

* Irony
A C/C++ minor mode for Emacs powered by libclang
See more, https://github.com/Sarcasm/irony-mode
#+BEGIN_SRC emacs-lisp

  (use-package irony
  :ensure t
  :config
  (progn
    (add-hook 'c++-mode-hook 'irony-mode)
    (add-hook 'c-mode-hook 'irony-mode)
    (add-hook 'objc-mode-hook 'irony-mode)

    (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)
  ))

  (use-package flycheck-irony
  :ensure t)

#+END_SRC

* helm
helm mode
See more, https://github.com/emacs-helm/helm
#+BEGIN_SRC emacs-lisp

  (use-package ag
  :defer
  :ensure t)

  (use-package helm-ag
  :ensure t
  :after ag)

  (use-package helm-projectile
  :ensure t
  :after helm
  :config
    (helm-projectile-on))

  (use-package diminish
  :ensure t
  :config
  (diminish 'visual-line-mode))

  (use-package helm
  :ensure t
  :diminish helm-mode
  :config
    (require 'helm-config)
  :bind
    ("C-c f" . helm-projectile-find-file-dwim)
    ("M-x" . helm-M-x)
    ("C-x r b" . helm-filtered-bookmarks)
    ("C-x C-f" . helm-find-files)
  :init
    (helm-mode 1)
    (customize-set-variable 'helm-ff-lynx-style-map t))

#+END_SRC

* multiple-cursors
multiple-cursors
See more, https://github.com/magnars/multiple-cursors.el
#+BEGIN_SRC  emacs-lisp

  (defun gpolonkai/no-blink-matching-paren ()
    (customize-set-variable 'blink-matching-paren nil))

  (defun gpolonkai/blink-matching-paren ()
    (customize-set-variable 'blink-matching-paren t))

  (use-package multiple-cursors
  :ensure t
  :init
    (defvar gpolonkai/mc-prefix-map (make-sparse-keymap)
      "Prefix keymap for multiple-cursors")
    (define-prefix-command 'gpolonkai/mc-prefix-map)
    (define-key global-map (kbd "C-c m") 'gpolonkai/mc-prefix-map)
  :hook
    (multiple-cursors-mode-enabled . gpolonkai/no-blink-matching-paren)
    (multiple-cursors-mode-disabled . gpolonkai/blink-matching-paren)
  :bind
    (:map gpolonkai/mc-prefix-map
     ("t" . mc/mark-all-like-this)
     ("m" . mc/mark-all-like-this-dwim)
     ("l" . mc/edit-lines)
     ("e" . mc/edit-ends-of-lines)
     ("a" . mc/edit-beginnings-of-lines)
     ("n" . mc/mark-next-like-this)
     ("p" . mc/mark-previous-like-this)
     ("s" . mc/mark-sgml-tag-pair)
     ("d" . mc/mark-all-like-this-in-defun)
     ("M-<mouse-1>" . mc/add-cursor-on-click)))

#+END_SRC

* text-scale
Easily adjust the font size in all Emacs frames
see more, https://github.com/purcell/default-text-scale
#+BEGIN_SRC emacs-lisp

  (use-package default-text-scale
      :ensure t
      :config
      (setq default-text-scale-amount 10)
      :bind
      ;; Plus makes it better
      ("M-+" . default-text-scale-increase)
      ;; Underscore makes it smaller (- is already bound)
      ("M-_" . default-text-scale-decrease))

#+END_SRC

* editorconfig
editor format plugin
see more, https://github.com/editorconfig/editorconfig-emacs
#+BEGIN_SRC emacs-lisp

  (use-package editorconfig
    :ensure t
    :config
    (editorconfig-mode t))
#+END_SRC

* smartpare
#+BEGIN_SRC emacs-lisp

  (use-package smartparens
  :ensure t
  :hook ((prog-mode . smartparens-mode)
	 (emacs-lisp-mode . smartparens-strict-mode))
  :init
  (setq sp-base-key-bindings 'sp)
  :config
  (define-key smartparens-mode-map [M-backspace] #'backward-kill-word)
  (define-key smartparens-mode-map [M-S-backspace] #'sp-backward-unwrap-sexp)
  (require 'smartparens-config))

  (use-package ws-butler
  :ensure t
  :hook (prog-mode . ws-butler-mode))

#+END_SRC

* auto highlight symbol
#+BEGIN_SRC emacs-lisp

(use-package auto-highlight-symbol
:ensure t
:config
  (global-auto-highlight-symbol-mode t))

#+END_SRC

* zygospore
toggle other windows for maximum focus. when foucus is no longer needed, they
can be toggled back. C-x 1 is conveniently bound to it.
 #+BEGIN_SRC emacs-lisp

  (use-package zygospore
  :ensure t
  :bind
   (:map ctl-x-map
     ("1" . zygospore-toggle-delete-other-windows)))

 #+END_SRC

* objed
text object manipulation
#+BEGIN_SRC emacs-lisp

  (use-package objed
  :ensure t
  :demand t
  :bind
  (:map global-map
      ("M-o" . objed-activate)))

#+END_SRC

* all the icons
#+BEGIN_SRC emacs-lisp

  (use-package all-the-icons
  :ensure t)

#+END_SRC

* colorful
#+BEGIN_SRC emacs-lisp

  (use-package rainbow-delimiters
  :ensure t
  :hook
  (prog-mode . rainbow-delimiters-mode))

  (use-package rainbow-identifiers
  :ensure t)

#+END_SRC

* flyspell
for all your spell-checking needs.
#+BEGIN_SRC emacs-lisp

  (use-package flyspell
  :ensure t
  :hook
  (prog-mode . flyspell-prog-mode)
  (text-mode . flyspell-mode))

#+END_SRC

* goto last change
#+BEGIN_SRC emacs-lisp

  (use-package goto-last-change
  :ensure t
  :defer
  :bind
  (("M-g /" . goto-last-change)))

#+END_SRC

* fandy narrow
#+BEGIN_SRC emacs-lisp

  (use-package fancy-narrow
  :ensure t
  :config
  (fancy-narrow-mode 1))

#+END_SRC

* autorevert
automaticlly revert changed files
#+BEGIN_SRC emacs-lisp

  (use-package autorevert
  :ensure t
  :config
  (global-auto-revert-mode 1))

  (use-package electric
  :ensure t
  :defer
  :config
  (electric-indent-mode 1))

  (use-package savehist
  :ensure t
  :defer
  :config
  (savehist-mode 1))

#+END_SRC

* speed bar
#+BEGIN_SRC emacs-lisp

  (use-package speedbar
  :ensure t
  :defer)

#+END_SRC

* spinner
display running background tasks
#+BEGIN_SRC emacs-lisp

  (use-package spinner
  :ensure t
  :defer)

#+END_SRC

* form feed
show form feeds as a horizontal line
#+BEGIN_SRC emacs-lisp

  (use-package form-feed
  :ensure t
  :hook
  (emacs-lisp-mode . form-feed-mode)
  (compilation-mode . form-feed-mode)
  (help-mode . form-feed-mode))

#+END_SRC

* golden ration
#+BEGIN_SRC emacs-lisp

  (use-package golden-ratio
  :ensure t
  :config
  (add-to-list 'golden-ratio-extra-commands 'ace-window)
  (golden-ratio-mode t))

#+END_SRC

* anzu
show number of matches in the mode line when searching
#+BEGIN_SRC emacs-lisp

  (use-package anzu
  :ensure t
  :delight
  :config
  (global-anzu-mode 1))

#+END_SRC

* ag
#+BEGIN_SRC emacs-lisp

  (use-package projectile
  :ensure t
  :delight '(:eval (concat " [" projectile-project-name "]"))
  :pin melpa-stable
  :config
  (projectile-mode t)
  :bind
  (:map projectile-mode-map
   ("C-c p" . projectile-command-map)))

  (use-package ag
  :ensure t
  :after projectile
  :bind
  (:map projectile-mode-map
      ("C-c p C-a" . ag-projectile)))

#+END_SRC

* loccur
#+BEGIN_SRC emacs-lisp

    (defun gpolonkai/toggle-loccur ()
      "Toggle `loccur-mode'.

    If `loccur-mode' is not active, starts it (which, in turn, will ask for the
    pattern to look for).  If it is active, it will disable it."
      (interactive)
      (if loccur-mode
	  (loccur-mode nil)
	(call-interactively 'loccur)))

    (use-package loccur
    :ensure t
    :bind
      (:map gpolonkai/pers-map
       ("C-c a" . gpolonkai/toggle-loccur)))

#+END_SRc

* highlight indent guides
#+BEGIN_SRC emacs-lisp

;  (use-package highlight-indent-guides
;  :hook
;  (prog-mode . highlight-indent-guides-mode))
;  :config
;  (setq highlight-indent-guides-method 'character)
;  (setq highlight-indent-guides-character ?|)
;  (setq highlight-indent-guides-auto-odd-face-perc 5)
;  (setq highlight-indent-guides-auto-even-face-perc 5)
;  (setq highlight-indent-guides-auto-character-face-perc 10)
;  (setq highlight-indent-guides-suppress-auto-error t)

#+END_SRC
  
* conventional-changelog
#+BEGIN_SRC emacs-lisp

  (use-package conventional-changelog
  :ensure t
  :init
  (with-eval-after-load 'magit-tag
    (transient-append-suffix 'magit-tag
     '(1 0 -1)
     '("c" "changelog" conventional-changelog-menu))))


#+END_SRC

