#+STARTUP: overview
#+PROPERTY: header-args :comments yes :results silent

* package archives
Add package website to list
#+BEGIN_SRC emacs-lisp

(require 'package)
(add-to-list 'package-archives
             '("gnu" . "https://elpa.gnu.org/packages/"))
(add-to-list 'package-archives
             '("melpa-stable" . "https://stable.melpa.org/packages/") t)
(add-to-list 'package-archives
             '("melpa" . "https://melpa.org/packages/") t)
(add-to-list 'package-archives
             '("org" . "https://orgmode.org/elpa/") t)

#+END_SRC

* pre load
** conifg use-packge and preload bind-key
#+BEGIN_SRC emacs-lisp

(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(require 'use-package)

(customize-set-variable 'use-package-always-ensure t)
(customize-set-variable 'use-package-verbose nil)

(use-package bind-key)


#+END_SRC

** install and configure Quelpa
#+BEGIN_SRC emacs-lisp

(unless (package-installed-p 'quelpa)
  (with-temp-buffer
    (url-insert-file-contents "https://raw.githubusercontent.com/quelpa/quelpa/master/quelpa.el")
    (eval-buffer)
    (quelpa-self-upgrade)))

#+END_SRC

** set UTF-8 as the default encoding
#+BEGIN_SRC emacs-lisp

(set-language-environment "UTF-8")
(set-default-coding-systems 'utf-8)

#+END_SRC

** Quelpa-use-package
#+BEGIN_SRC emacs-lisp

(quelpa
 '(quelpa-use-package
   :fetcher git
   :url "git@github.com:quelpa/quelpa-use-package.git"))
(require 'quelpa-use-package)

#+END_SRC

* Interface tweaks
 Modify interface
#+BEGIN_SRC emacs-lisp

  (setq inhibit-startup-message t)
  (tool-bar-mode -1)
  (fset 'yes-or-no-p 'y-or-n-p)
  (global-set-key (kbd "<f5>") 'revert-buffer)

#+END_SRC

* Themes and  Modeline 
Editor themes, see more https://github.com/hlissner/emacs-doom-themes
#+BEGIN_SRC emacs-lisp

  (use-package color-theme-modern
  :ensure t)
  (use-package doom-themes
  :ensure t)
  (use-package doom-modeline
  :ensure t)

  (require 'doom-modeline)
  (doom-modeline-init)

  (load-theme 'doom-zenburn  t)

  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)

  ;; Enable custom neotree (all-the-icons must be installed!)
  ;; (doom-themes-neotree-config)

  ;; or for treemacs users
  (setq doom-themes-treemacs-theme "doom-colors") ; use the colorful treemacs theme
  (doom-themes-treemacs-config)

  ;; corrects (and improves) org-mode's native fontification
  (doom-themes-org-config)

#+END_SRC

* Org-mode
Config org-mode, see more https://orgmode.org/
#+BEGIN_SRC emacs-lisp

  (use-package org
  :ensure t
  :pin org)

  ;; this config for linux
  ;; (setenv "BROWSER" "chromium-browser")
  (use-package org-bullets
  :ensure t
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

  ;; this config for linux
  ;; (setq org-file-apps (append '(
  ;; ("\\.pdf\\'" . "evince %s")
  ;; ("\\.x?html?\\'" . "/usr/bin/chromium-browser %s")
  ;; ) org-file-apps ))`


  (setq org-agenda-files (list "~/Dropbox/Org/schedule.org"
			       "~/.emacs.d/org/course.org"
			       "~/.emacs.d/org/exercise.org"
			       "~/.emacs.d/org/gtd.org"
			       "~/.emacs.d/org/social.org"
			       "~/.emacs.d/org/project.org"))

  ;; Multiple keyword sets in one file
  (setq org-todo-keywords
    '((sequence "TODO" "IN-PROGRESS" "WAIT" "|" "DONE")
      (sequencee "REPORT" "BUG" "KNOWNCAUSE" "|" "FIXED")
      (sequence "|" "CANCELED")))

  (setq org-todo-keyword-faces 
    '(("TODO" . (:foreground "orange" :weight bold)) 
      ("REPORT" . (:foreground "orange" :weight bold))
      ("IN-PROGRESS" . "cyan")
      ("BUG" . "cyan")
      ("KNOWNCAUSE" . "cyan")
      ("DONE" . "green")
      ("FIXED" . "green")
      ("CANCELED" . (:foreground "blue" :weight bold))))

  (setq org-tag-alist '((:startgroup . nil)
			("@work" . ?w)
			("@home" . ?h)
			("@course" . ?c)
			("@social" . ?s)
			(:endgroup . nil)
			("laptop" . ?l)
			("pc" . ?p)))



#+END_SRC

* Treemacs
A tree layout file explorer for emacs, see more https://github.com/Alexander-Miller/treemacs
#+BEGIN_SRC emacs-lisp
  (use-package dired-sidebar
  :bind ("C-c C-x s" . dired-sidebar-toggle-sidecar))

  (use-package all-the-icons
  :defer)

  (use-package all-the-icons-dired
  :hook (dired-mode . all-the-icons-dired-mode))

  (use-package all-the-icons-ivy-rich
  :after ivy-rich
  :config (all-the-icons-ivy-rich-mode 1))

  (use-package treemacs
  :bind ("C-c C-x t" . treemacs))

#+END_SRC

* Undo tree
Visulize the Undo trace, see more https://elpa.gnu.org/packages/undo-tree.html 
Document: http://www.dr-qubit.org/undo-tree/undo-tree.txt
#+BEGIN_SRC emacs-lisp

  (use-package undo-tree
    :ensure t
    :init
    (global-undo-tree-mode 1)
    (global-set-key (kbd "C-z") 'undo))

#+END_SRC

* Ace windows
Fow switching window easily
#+BEGIN_SRC emacs-lisp

  (use-package ace-window
    :ensure t
    :init 
    (progn 
      (setq aw-scope 'frame)
      (setq aw-background nil)
      (global-set-key (kbd "M-o") 'ace-window)
      (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
    )
  )

#+END_SRC

* Which key
Displays available keybindings in popup, see more https://github.com/justbur/emacs-which-key
#+BEGIN_SRC emacs-lisp

  (use-package which-key
    :ensure t
    :config
    (which-key-mode))

#+END_SRC

* Ibuffer 
Buffer managerment, see more https://www.emacswiki.org/emacs/IbufferMode
#+BEGIN_SRC emacs-lisp

  (global-set-key (kbd "C-x C-b") 'ibuffer)

  (setq ibuffer-saved-filter-groups
    (quote (("defullt"
      ("dired" (mode . dired-mode))
      ("org" (mode . "^.*org$"))
      ("shell" (or (mode . eshell-mode) (mode . shell-mode)))
      ("programming" (or
      (mode . c++-mode)))
      ("emacs" (or
	(mode . "^\\*scratch\\*$")
	(mode . "^\\*Message\\*$")))
  ))))

  (add-hook 'ibuffer-mode-hook
    (lambda()
      (ibuffer-auto-mode 1)
      (ibuffer-switch-to-saved-filter-groups "default")))

  ;; Don't show filter groups if there are no buffers in that group
  (setq ibuffer-show-empty-filter-groups nil)

  ;; Don't ask for confirmation to delete marked buffers
  (setq ibuffer-expert t)

#+END_SRC

* Swiper/Ivy/Counsel
Swiper gives us a really efficient incremental search with regular expressions 
and Ivy / Counsel replace a lot of ido or helms completion functionality
See more Swiper: https://github.com/abo-abo/swiper
#+BEGIN_SRC emacs-lisp

  (use-package counsel
    :ensure t
    :bind
    (("M-y" . counsel-yank-pop)
    :map ivy-minibuffer-map
    ("M-y" . ivy-next-line)))

  (use-package ivy
    :ensure t
    :diminish (ivy-mode)
    :bind (("C-x b" . ivy-switch-buffer))
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "%d/%d ")
    (setq ivy-display-style 'fancy))


  (use-package swiper
    :ensure t
    :bind (("C-s" . swiper-isearch)
	   ("C-r" . swiper-isearch)
	   ("C-c C-r" . ivy-resume)
	   ("M-x" . counsel-M-x)
	   ("C-x C-f" . counsel-find-file))
    :config
    (progn
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (setq ivy-display-style 'fancy)
      (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
      ))

#+END_SRC

* Better shell
This package simplifies shell management and sudo access 
by providing the following commands
See more: https://github.com/killdash9/better-shell
#+BEGIN_SRC emacs-lisp

  (use-package better-shell
  :ensure t
  :bind (("C-c s" . better-shell-shell) 
	 ("C-c r" . better-shell-remote-open)))

#+END_SRC

* Origami
A text folding minor mode for emacs
See more: https://github.com/gregsexton/origami.el
#+BEGIN_SRC emacs-lisp

  (use-package origami
  :ensure t
  :bind (
    ("C-c o s" . origami-mode)
    ("C-c o t" . origame-origami-toggle-node)
    ("C-c o c" . origami-close-node)
    ("C-c o o" . origami-open-node)
    ("C-c o u" . origami-undo)
    ("C-c o g" . origami-open-all-nodes)
    ("C-c o r" . origami-close-all-nodes) 
  ))

#+END_SRC

* Linum
Set line number
#+BEGIN_SRC emacs-lisp

  (use-package linum
  :ensure t
  :config
  :bind (("C-c l" . linum-mode))
  )

#+END_SRC

* Goto
Use goto-line-preview and goto chg
See more:
goto-line-preview: https://github.com/jcs-elpa/goto-line-preview
goto-chg: https://www.emacswiki.org/emacs/GotoChg
#+BEGIN_SRC emacs-lisp

  (use-package goto-chg
  :ensure t
  :config (setq tab-width 4)
  :bind (("C-c g c" .  goto-last-change)
	 ("C-c g r" . goto-last-chanage-reverse)))

  (use-package goto-line-preview
  :ensure t
  :bind (("C-c g p". goto-line-preview)))

#+END_SRC

* Company
Modular in-buffer completion framework for Emacs
See more: http://company-mode.github.io/
#+BEGIN_SRC emacs-lisp

  (use-package company
  :hook (emacs-lisp-mode . company-mode)
  :config
  (setq company-idle-delay 0)
  (setq company-minimum-prefix-length 3)
  (global-company-mode t))

  (use-package company-prescient
  :after company
  :config
  (company-prescient-mode))

  (use-package company-irony
  :ensure t)

#+END_SRC

* Flycheck
A modern on-the-fly syntax checking extension
See more, https://www.flycheck.org/en/latest/
#+BEGIN_SRC emacs-lisp

  (use-package flycheck
  :ensure t
  :init 
  :config
  ;; Disable the error indicator on the fringe
  (setq flycheck-indication-mode nil)

  ;; Disable automatic syntax check on new line
  (setq flycheck-syntax-automatically '(save 
  idle-change 
  mode-enable))

  ;; Immediate syntax checking quite annoying. Slow it down a bit.
  (setq flycheck-idle-change-delay 2.0)

  ;; Customize faces (Colors are copied from solarized definitions

  (set-face-attribute 'flycheck-warning nil
  :background "#b58900"
  :foreground "#262626"
  :underline nil)

  (set-face-attribute 'flycheck-error nil
  :background "dc322f"
  :foreground "#262626"
  :underline nil)

  (global-flycheck-mode t))

  (use-package flycheck-irony
  :ensure t)

#+END_SRC  

* Yasnippet
A template system
See more, https://github.com/joaotavora/yasnippet
#+BEGIN_SRC emacs-lisp
  (setq-default abbrev-mode 1)

  (use-package yasnippet
  :defer 2
  :init
  (bind-key "C-c y" 'yas-about)
  :config
  (setq yas-snippet-dirs '("~/.emacs.d/snippets"))
  (yas-global-mode 1))

  ;; a collection of yasnippet snippets for many languages
  (use-package yasnippet-snippets
  :defer)

  (use-package ivy-yasnippet
  :bind ("C-c y" . ivy-yasnippet))

#+END_SRC

* languages
** lsp mode
#+BEGIN_SRC emacs-lisp

  (use-package lsp-mode
  :commands lsp
  :diminish lsp-mode
  :bind
  ("M-." . 'lsp-find-definition)
  ("M-t" . 'lsp-find-type-definition)
  ("M-?" . 'lsp-find-references))

  (use-package lsp-ui)

#+END_SRC

** go mode
#+BEGIN_SRC emacs-lisp

  (use-package go-mode
  :hook (go-mode . lsp))


#+END_SRC

** rust mode  
#+BEGIN_SRC emacs-lisp

  (use-package rust-mode
  :hook (rust-mode . lsp)
  :bind
  ("C-c g" . rust-run)
  ("C-c t" . rust-test)
  ("C-c b" . cargo-process-build)
  :config
  (setq rust-format-on-save t))

  (use-package cargo
  :hook (rust-mode . cargo-minor-mode)
  :diminish cargo-minor-mode)

  (use-package flycheck-rust
  :config (add-hook 'flycheck-mode-hook #'flycheck-rust-setup))

  (use-package racer
  :after rust-mode
  :diminish racer-mode
  :hook (rust-mode . racer-mode)
  :bind
  ("M-j" . racer-find-definition)
  ;; (:map racer-mode-map ("M-." . #'xref-find-definitions))
  (:map racer-mode-map ("M-." . nil)))

#+END_SRC

** toml mode
#+BEGIN_SRC emacs-lisp

(use-package toml-mode)

#+END_SRC

** eldoc mode
#+BEGIN_SRC emacs-lisp

(use-package eldoc
  :diminish eldoc-mode)

#+END_SRC
** yaml mode
#+BEGIN_SRC emacs-lisp

(use-package yaml-mode
  :mode (("\\.yml\\'" . yaml-mode)
         ("\\.yaml\\'" . yaml-mode))
  :init
  (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode)))

#+END_SRC
** markdown mode
#+BEGIN_SRC emacs-lisp

  (use-package markdown-mode
  :mode (("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode)))

#+END_SRC
** dockerfile mode
#+BEGIN_SRC emacs-lisp

  (use-package dockerfile-mode)

#+END_SRC

* Magit 
Git plugin
See more, https://magit.vc/
#+BEGIN_SRC emacs-lisp

  (use-package magit
  :ensure t
  :bind (
    ("C-c x c" . magit-commit)
    ("C-c x p" . magit-push)
    ("C-c x l" . magit-log)
    ("C-c x n" . magit-clone)
    ("C-c x b" . magit-branch-create)
    ("C-c x d" . magit-branch-delete)
    ("C-c x r" . magit-branch-reset)
    ("C-c x o" . magit-checkout)
    ("C-c x s" . magit-stash)
    ("C-c x g" . magit-status)
    ("C-c x u" . magit-pull)
  ))

#+END_SRC

* Auctex
TeX plugin
See more, https://www.gnu.org/software/auctex/
#+BEGIN_SRC emacs-lisp

  (use-package tex-site
  :defer t
  :ensure auctex
  :config
  (setq TeX-auto-save t))

#+END_SRC

* Irony
A C/C++ minor mode for Emacs powered by libclang
See more, https://github.com/Sarcasm/irony-mode
#+BEGIN_SRC emacs-lisp

  (use-package irony
  :ensure t
  :config
  (progn
    (add-hook 'c++-mode-hook 'irony-mode)
    (add-hook 'c-mode-hook 'irony-mode)
    (add-hook 'objc-mode-hook 'irony-mode)

    (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)
  ))

  (use-package flycheck-irony
  :ensure t)

#+END_SRC

* helm
helm mode
See more, https://github.com/emacs-helm/helm
#+BEGIN_SRC emacs-lisp

(use-package ag)

(use-package helm-ag
  :after ag)

(use-package helm-projectile
  :after helm
  :config
  (helm-projectile-on))

(use-package diminish)

(use-package helm
  :diminish helm-mode
  :init
  (require 'helm-config)
  :bind
  ("C-c f" . helm-projectile-find-file-dwim)
  ("M-x" . helm-M-x)
  ("C-x r b" . helm-filtered-bookmarks)
  ("C-x C-f" . helm-find-files)
  :init
  (helm-mode 1)
  (customize-set-variable 'helm-ff-lynx-style-map t))

#+END_SRC

* multiple-cursors
multiple-cursors
See more, https://github.com/magnars/multiple-cursors.el
#+BEGIN_SRC  emacs-lisp

  (defun gpolonkai/no-blink-matching-paren ()
    (customize-set-variable 'blink-matching-paren nil))

  (defun gpolonkai/blink-matching-paren ()
    (customize-set-variable 'blink-matching-paren t))

  (use-package multiple-cursors
    :init
    (defvar gpolonkai/mc-prefix-map (make-sparse-keymap)
      "Prefix keymap for multiple-cursors")
    (define-prefix-command 'gpolonkai/mc-prefix-map)
    (define-key global-map (kbd "C-c m") 'gpolonkai/mc-prefix-map)
    :hook
    (multiple-cursors-mode-enabled . gpolonkai/no-blink-matching-paren)
    (multiple-cursors-mode-disabled . gpolonkai/blink-matching-paren)
    :bind
    (:map gpolonkai/mc-prefix-map
     ("t" . mc/mark-all-like-this)
     ("m" . mc/mark-all-like-this-dwim)
     ("l" . mc/edit-lines)
     ("e" . mc/edit-ends-of-lines)
     ("a" . mc/edit-beginnings-of-lines)
     ("n" . mc/mark-next-like-this)
     ("p" . mc/mark-previous-like-this)
     ("s" . mc/mark-sgml-tag-pair)
     ("d" . mc/mark-all-like-this-in-defun)
     ("M-<mouse-1>" . mc/add-cursor-on-click)))

#+END_SRC

* text-scale
Easily adjust the font size in all Emacs frames
see more, https://github.com/purcell/default-text-scale
#+BEGIN_SRC emacs-lisp

  (use-package default-text-scale
      :ensure t
      :config
      (setq default-text-scale-amount 10)
      :bind
      ;; Plus makes it better
      ("M-+" . default-text-scale-increase)
      ;; Underscore makes it smaller (- is already bound)
      ("M-_" . default-text-scale-decrease))

#+END_SRC

* editorconfig
editor format plugin
see more, https://github.com/editorconfig/editorconfig-emacs
#+BEGIN_SRC emacs-lisp

  (use-package editorconfig
    :ensure t
    :config
    (editorconfig-mode t))
#+END_SRC

* smartpare
#+BEGIN_SRC emacs-lisp

  (use-package smartparens
  :hook ((prog-mode . smartparens-mode)
	 (emacs-lisp-mode . smartparens-strict-mode))
  :init
  (setq sp-base-key-bindings 'sp)
  :config
  (define-key smartparens-mode-map [M-backspace] #'backward-kill-word)
  (define-key smartparens-mode-map [M-S-backspace] #'sp-backward-unwrap-sexp)
  (require 'smartparens-config))

  (use-package ws-butler
  :hook (prog-mode . ws-butler-mode))

#+END_SRC

* auto highlight symbol
#+BEGIN_SRC emacs-lisp

(use-package auto-highlight-symbol
  :config
  (global-auto-highlight-symbol-mode t))

#+END_SRC

* Highlight indentation
#+BEGIN_SRC emacs-lisp

  (use-package highlight-indentation)

#+END_SRC

* highlight the current line
#+BEGIN_SRC emacs-lisp

  (use-package hl-line
  :config
  (when window-system
   (global-hl-line-mode)))

#+END_SRC

* zygospore
toggle other windows for maximum focus. when foucus is no longer needed, they
can be toggled back. C-x 1 is conveniently bound to it.
 #+BEGIN_SRC emacs-lisp

   (use-package zygospore
   :bind
   (:map ctl-x-map
     ("1" . zygospore-toggle-delete-other-windows)))

 #+END_SRC

* objed
text object manipulation
#+BEGIN_SRC emacs-lisp

  (use-package objed
  :demand t
  :bind
  (:map global-map
      ("M-o" . objed-activate)))

#+END_SRC

* all the icons
#+BEGIN_SRC emacs-lisp

  (use-package all-the-icons)

#+END_SRC

* colorful
#+BEGIN_SRC emacs-lisp

  (use-package rainbow-delimiters
  :hook
  (prog-mode . rainbow-delimiters-mode))

  (use-package rainbow-identifiers)

#+END_SRC

* flyspell
for all your spell-checking needs.
#+BEGIN_SRC emacs-lisp

  (use-package flyspell
  :hook
  (prog-mode . flyspell-prog-mode)
  (text-mode . flyspell-mode))

#+END_SRC
