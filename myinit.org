#+STARTUP: overview
#+PROPERTY: header-args :comments yes :results silent

* pre config
** editor config
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-messsage t)
  (global-set-key (kbd "<f5>") 'revert-buffer)
  (fset 'yes-or-no-p 'y-or-n-p)
  
  ;; cursor
  (setq-default cursor-type 'bar)
  (set-cursor-color "#63D490")
  (blink-cursor-mode 1)  
  
  (menu-bar-mode -1)
  (tool-bar-mode -1)
;;  (scroll-bar-mode -1)  
;;  (set-face-attribute 'region nil :background "#fffacd")
  (add-to-list 'default-frame-alist '(fullscreen . maximized))

  (mouse-wheel-mode -1)  
  (global-set-key [wheel-up] 'ignore)
  (global-set-key [double-wheel-up] 'ignore)
  (global-set-key [triple-wheel-up] 'ignore)
  (global-set-key [wheel-down] 'ignore) 
  (global-set-key [double-wheel-down] 'ignore)
  (global-set-key [triple-wheel-down] 'ignore)
  (global-set-key [wheel-left] 'ignore)
  (global-set-key [double-wheel-left] 'ignore)
  (global-set-key [triple-wheel-left] 'ignore)
  (global-set-key [wheel-right] 'ignore)
  (global-set-key [double-wheel-right] 'ignore) 
  (global-set-key [triple-wheel-right] 'ignore)  
  
  (require 'hl-line)
  (add-hook 'prog-mode-hook #'hl-line-mode)
  (add-hook 'text-mode-hook #'hl-line-mode)

  (use-package bind-key)
  (setq gc-cons-threshold 100000000)
  (set-charset-priority 'unicode)
  (prefer-coding-system 'utf-8-unix)
  (delete-selection-mode t)
  (column-number-mode)
  (savehist-mode)

  (set-language-environment "UTF-8")
  (set-default-coding-systems 'utf-8)
  (setq
    ;; No need to see GNU agitprop.
    inhibit-startup-screen t
    ;; Double-spaces after periods is morally wrong.
    sentence-end-double-space nil
    ;; Never ding at me, ever.
    ring-bell-function 'ignore
    ;; Save existing clipboard text into the kill ring before replacing it.
    save-interprogram-paste-before-kill t
    ;; Prompts should go in the minibuffer, not in a GUI.
    use-dialog-box nil
    ;; Fix undo in commands affecting the mark.
    mark-even-if-inactive nil
    ;; Let C-k delete the whole line.
    kill-whole-line t
    ;; search should be case-sensitive by default
    case-fold-search nil
    ;; no need to prompt for the read command _every_ time
    compilation-read-command nil
    ;; scroll to first error
    compilation-scroll-output 'first-error
    ;; accept 'y' or 'n' instead of yes/no
    ;; the documentation advises against setting this variable
    ;; the documentation can get bent imo
    use-short-answers t
    ;; eke out a little more scrolling performance
    fast-but-imprecise-scrolling nil
    ;; prefer newer elisp files
    load-prefer-newer t
    ;; when I say to quit, I mean quit
    confirm-kill-processes nil
    ;; if native-comp is having trouble, there's not very much I can do
    native-comp-async-report-warnings-errors 'silent
    ;; unicode ellipses are better
    truncate-string-ellipsis "â€¦"
    ;; I want to close these fast, so switch to it so I can just hit 'q'
    help-window-select t
    ;; this certainly can't hurt anything
    delete-by-moving-to-trash t
    ;; keep the point in the same place while scrolling
    scroll-preserve-screen-position t
    ;; more info in completions
    completions-detailed t
    ;; highlight error messages more aggressively
    next-error-message-highlight t
    ;; don't let the minibuffer muck up my window tiling
    read-minibuffer-restore-windows t
    ;; scope save prompts to individual projects
    save-some-buffers-default-predicate 'save-some-buffers-root
    ;; don't keep duplicate entries in kill ring
    kill-do-not-save-duplicates t
  )

  ;; Never mix tabs and spaces. Never use tabs, period.
  ;; We need the setq-default here because this becomes
  ;; a buffer-local variable when set.
  (setq-default indent-tabs-mode nil)
#+END_SRC 
** backup config
#+BEGIN_SRC emacs-lisp  
;; store all backup and autosave files in the tmp dir
  (setq backup-directory-alist
    `((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms
    `((".*" ,temporary-file-directory t)))

#+END_SRC
** helpful
#+BEGIN_SRC emacs-lisp

  (use-package s
  :ensure t)

  (use-package dash
  :ensure t)

  (use-package shut-up
  :ensure t)
  
#+END_SRC 

* theme and modeline
see more https://github.com/hlissner/emacs-doom-themes
doomemacs: https://github.com/doomemacs/themes
#+BEGIN_SRC emacs-lisp
  
  (use-package color-theme-modern
  :ensure t)

  (use-package doom-themes
  :ensure t
  :config
  (load-theme 'doom-zenburn t)
  (doom-themes-treemacs-config)
  (doom-themes-org-config)
  (setq doom-themes-treemacs-theme "doom-colors"))

  (use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1))

#+END_SRC

* common
** fancy narrow
#+BEGIN_SRC emacs-lisp
  (use-package fancy-narrow
  :defer
  :ensure t
  :config
  (fancy-narrow-mode 1))
#+END_SRC

** icon
#+BEGIN_SRC emacs-lisp
  (ignore-errors (set-frame-font "JuliaMono-12"))

  (use-package all-the-icons
  :ensure t)

  (use-package all-the-icons-dired
  :ensure t
  :after all-the-icons
  :hook (dired-mode . all-the-icons-dired-mode))

  (use-package all-the-icons-ivy-rich
  :ensure t
  :after ivy-rich
  :config (all-the-icons-ivy-rich-mode 1))
#+END_SRC

** linum
#+BEGIN_SRC emacs-lisp
  (use-package linum
  :ensure t
  :config
  :bind (("C-c l" . linum-mode)))
#+END_SRC

** vertico
see more, https://github.com/minad/vertico
#+BEGIN_SRC emacs-lisp
  (use-package vertico
  :ensure t
  :config
  (vertico-mode)
  (vertico-mouse-mode)
  :custom
  (vertico-count 22)
  (vertico-cycle t)
  :bind (:map vertico-map
              ("C-v e" . #'vertico-quick-exit)
              ("C-v c" . #'vertico-quick-insert)
              ("C-v w" . #'exit-minibuffer)
              ("C-v i" . #'vertico-insert)
              ("C-v v" . #'vertico)
              ("C-v d" . #'vertico-directory-delete-char)))
#+END_SRC
** treemacs
see more, https://github.com/Alexander-Miller/treemacs
#+BEGIN_SRC emacs-lisp
  (use-package treemacs
  :ensure t
  :bind (
  ("C-c C-x t" . treemacs)
  ("C-c C-x e" . treemacs-edit-workspaces)
  ("C-c C-x d" . treemacs-decrease-width)
  ("C-c C-x i" . treemacs-increase-width)
  ("C-c C-x w" . treemacs-switch-workspace)))

  (use-package treemacs-projectile
  :after (treemacs projectile)
  :ensure t)

  (use-package treemacs-icons-dired
  :hook (dired-mode . treemacs-icons-dired-enable-once)
  :ensure t)

  (use-package treemacs-magit
  :after (treemacs magit)
  :ensure t)

  (use-package treemacs-persp ;;treemacs-perspective if you use perspective.el vs. persp-mode
  :after (treemacs persp-mode) ;;or perspective vs. persp-mode
  :ensure t
  :config (treemacs-set-scope-type 'Perspectives))

  (use-package treemacs-tab-bar ;;treemacs-tab-bar if you use tab-bar-mode
  :after (treemacs)
  :ensure t
  :config (treemacs-set-scope-type 'Tabs))

  (use-package all-the-icons
  :ensure t)

  (use-package all-the-icons-dired
  :ensure t
  :after all-the-icons
  :hook (dired-mode . all-the-icons-dired-mode))
#+END_SRC

** vterm
#+BEGIN_SRC emacs-lisp
  (use-package vterm
  :defer
  :ensure t
  :bind ("C-x g" . vterm))
#+END_SRC
** consult
#+BEGIN_SRC emacs-lisp
  (use-package consult
  :ensure t
  :config
  (defun pt/yank-pop ()
    "As pt/yank, but calling consult-yank-pop."
    (interactive)
    (let ((point-before (point)))
      (consult-yank-pop)
      (indent-region point-before (point))))

  :bind (("C-c i"     . #'consult-imenu)
         ("C-c r"     . #'consult-recent-file)
         ("C-c y"     . #'pt/yank-pop)
         ("C-c R"     . #'consult-bookmark)
         ("C-c `"     . #'consult-flymake)
         ("C-c h"     . #'consult-ripgrep)
         ("C-x C-f"   . #'find-file)
         ("C-c C-h a" . #'consult-apropos)
         )
  :custom
  (completion-in-region-function #'consult-completion-in-region)
  (xref-show-xrefs-function #'consult-xref)
  (xref-show-definitions-function #'consult-xref)
  (consult-project-root-function #'deadgrep--project-root) ;; ensure ripgrep works
  )
#+END_SRC

** marginalia
#+BEGIN_SRC emacs-lisp
  (use-package marginalia
  :ensure t
  :init (marginalia-mode +1))
#+END_SRC
** orderless
#+BEGIN_SRC emacs-lisp
  (use-package orderless
  :ensure t
  :custom (completion-styles `(orderless basic)))
#+END_SRC

** crtlf
#+BEGIN_SRC emacs-lisp
  (use-package ctrlf
  :ensure t
  :init (ctrlf-mode +1))
#+END_SRC

** prescient
#+BEGIN_SRC emacs-lisp
  (use-package prescient
  :ensure t)
#+END_SRC

** ace 
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
  :ensure t
  :config 
  (setq aw-scope 'frame)
  (setq aw-background nil)
  (global-set-key (kbd "C-c a") 'ace-window)
  (ace-window-display-mode)
  (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)))

  (use-package ace-jump-mode
  :ensure t
  :bind ("C-." . ace-jump-mode))

  (use-package ace-flyspell
  :ensure t
  :bind
  (:map flyspell-mode-map
      ("C-M-i" . ace-flyspell-correct-word)))
#+END_SRC

* editor
** undo
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
  :ensure t
  :init
  (global-undo-tree-mode 1)
  (global-set-key (kbd "C-z") 'undo)
  :config
  (setq undo-tree-auto-save-history t)
  (setq undo-tree-history-directory-alist 
    `(("." . ,temporary-file-directory))))
#+END_SRC

** helm
#+BEGIN_SRC emacs-lisp
  (use-package ag
  :defer
  :ensure t)

  (use-package helm-ag
  :ensure t
  :after ag)

  (use-package helm-projectile
  :ensure t
  :after helm
  :config (helm-projectile-on))

  (use-package helm
  :ensure t
  :diminish helm-mode
  :config
  (require 'helm-config)
  :bind
  ("C-c f" . helm-projectile-find-file-dwim)
  ("M-x" . helm-M-x)
  ("C-x r b" . helm-filtered-bookmarks)
  ("C-x C-f" . helm-find-files)
  :init
  (helm-mode +1)
  (customize-set-variable 'helm-ff-lynx-style-map t))
#+END_SRC

** magit
see more, https://magit.vc/
#+BEGIN_SRC emacs-lisp
  (use-package magit
  :ensure t
  :diminish magit-autorevert-mode
  :diminish auto-revert-mode
  :config
  (defun pt/commit-hook () (set-fill-column 80))
  (add-hook 'git-commit-setup-hook #'pt/commit-hook)
  (add-to-list 'magit-no-confirm 'stage-all-changes)
  :bind (
    ("C-c x c" . magit-commit)
    ("C-c x p" . magit-push)
    ("C-c x l" . magit-log)
    ("C-c x n" . magit-clone)
    ("C-c x b" . magit-branch-create)
    ("C-c x d" . magit-branch-delete)
    ("C-c x r" . magit-branch-reset)
    ("C-c x o" . magit-checkout)
    ("C-c x s" . magit-stash)
    ("C-c x g" . magit-status)
    ("C-c x u" . magit-pull)
    ("C-c x y" . magit-branch-checkout)
    ("C-c x a" . magit-branch-and-checkout)
  ))

  (use-package forge
  :ensure t
  :after magit
  :bind (
     ("C-c v p" . forge-pull)
     ("C-c v i" . forge-list-issues)
     ("C-c v r" . forge-list-pullreqs)
     ("C-c v a" . forge-create-pullreq-from-issue)
     ("C-c v u" . forge-create-issue)
     ("C-c v d" . forge-add-repository)
     ("C-c v l" . forge-list-topics)
     ("C-c v n" . forge-forge-edit-topic-note)
     ("C-c v m" . forge-edit-mark)
     ("C-c v t" . forge-edit-topic-title)
     ("C-c v o" . forge-edit-topic-review-requests)
     ("C-c v q" . forge-edit-topic-milestone)
     ("C-c v f" . forge-edit-topic-assignees)
     ("C-c v s" . forge-edit-topic-state)
     ("C-c v g" . forge-merge)
     ("C-c v y" . forge-create-pullreq)
   ))

  ;; Hack to eliminate weirdness
  (unless (boundp 'bug-reference-auto-setup-functions)
    (defvar bug-reference-auto-setup-functions '()))


  (use-package libgit
  :delight
  :ensure t
  :after magit)

  (use-package magit-libgit
  :ensure t
  :after (magit libgit))


  (use-package git-messenger
  :ensure t
  :bind ("C-c x m" . git-messenger:popup-message)
  :config
  (setq git-messenger:show-detail t
        git-messenger:use-magit-popup t))

  (use-package git-timemachine
  :ensure t
  :bind ("C-c x t" . git-timemachine)) 
#+END_SRC

** rainbow
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
  :ensure t
  :hook
  (prog-mode . rainbow-delimiters-mode))

  (use-package rainbow-identifiers
  :ensure t)
#+END_SRC

** anzu
#+BEGIN_SRC emacs-lisp
  (use-package anzu
  :ensure t
  :delight
  :bind  (
    ("C-x r i" . anzu-isearch-query-replace)     
    ("C-x r a" . anzu-query-replace))
  :config
  (global-anzu-mode 1))
#+END_SRC
** prodigy
#+BEGIN_SRC emacs-lisp
  (use-package prodigy
  :ensure t
  :bind (("C-c 8" . #'prodigy)
           :map prodigy-view-mode-map
           ("$" . #'end-of-buffer))
  :custom (prodigy-view-truncate-by-default t)
  :config
  ;;  (load "~/.emacs.d/services.el" 'noerror))
    (prodigy-define-tag
    :name 'pulumi
    :ready-message "Pulumi!!!")
    (prodigy-define-tag
     :name 'operator
     :ready-message "Matrixone Operator!!!")

    (prodigy-define-service
     :name "pulumi up"
     :command "pulumi"
     :args '("up", "--yes")
     :cwd "~/Documents/matrixone-operator/"
     :tags '(pulumi))
  )
#+END_SRC

** miniedit
#+BEGIN_SRC emacs-lisp
  (use-package miniedit
  :ensure t)
#+END_SRC
* programming
** lsp
#+BEGIN_SRC emacs-lisp
  (setq lsp-log-io nil) ;; Don't log everything = speed
  (setq lsp-keymap-prefix "C-c j")
  (setq lsp-restart 'auto-restart)
  (setq lsp-ui-sideline-show-diagnostics t)
  (setq lsp-ui-sideline-show-hover t)
  (setq lsp-ui-sideline-show-code-actions t)

  (use-package lsp-mode
  :ensure t
  :commands lsp
  :diminish lsp-mode
  :bind
  ("M-." . 'lsp-find-definition)
  ("M-t" . 'lsp-find-type-definition)
  ("M-?" . 'lsp-find-references))

  (use-package lsp-ui
  :ensure t)
#+END_SRC

** tree sitter
#+BEGIN_SRC emacs-lisp
  (use-package tree-sitter
  :ensure t
  :hook (
    (rust-mode . tree-sitter-mode)
    (toml-mode . tree-sitter-mode)
    (markdown-mode . tree-sitter-mode)
    (go-mode . tree-sitter-mode)))

  (use-package tree-sitter-langs
  :defer
  :ensure t)
#+END_SRC

** rust
#+BEGIN_SRC emacs-lisp
  (use-package rust-mode
  :defer
  :ensure t
  :hook (rust-mode . lsp)
  :bind
  ("C-c g" . rust-run)
  ("C-c t" . rust-test)
  ("C-c b" . cargo-process-build)
  :config
  (setq rust-format-on-save t)
  (setq lsp-rust-server 'rust-analyzer))

  (use-package cargo
  :defer
  :ensure t
  :hook (rust-mode . cargo-minor-mode)
  :diminish cargo-minor-mode
  :bind (
    ("C-x j r" . cargo-process-run)
    ("C-x j b" . cargo-process-build)
    ("C-x j a" . cargo-process-add)
    ("C-x j t" . cargo-process-test)
    ("C-x j c" . cargo-process-clippy)
    ("C-x j l" . cargo-process-clean)
    ()))

  (use-package flycheck-rust
  :defer
  :ensure t
  :config (add-hook 'flycheck-mode-hook #'flycheck-rust-setup))

  (use-package racer
  :after rust-mode
  :ensure t
  :diminish racer-mode
  :hook (rust-mode . racer-mode)
  :bind
  ("M-j" . racer-find-definition)
  ;; (:map racer-mode-map ("M-." . #'xref-find-definitions))
  (:map racer-mode-map ("M-." . nil)))
#+END_SRC

** toml
#+BEGIN_SRC emacs-lisp
  (use-package toml-mode
  :defer
  :ensure t)
#+END_SRC

** markdown
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
  :defer
  :ensure t
  :mode (("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode)))
#+END_SRC

** go
#+BEGIN_SRC emacs-lisp
  (use-package go-mode
  :defer
  :ensure t
  :mode "\\.go\\'"
  :config
  (defun my/go-mode-setup ()
    "Basic Go mode setup."
  (add-hook 'before-save-hook #'lsp-format-buffer t t)
  (add-hook 'before-save-hook #'lsp-organize-imports t t))
  (add-hook 'go-mode-hook #'my/go-mode-setup)
  :hook
  (go-mode . lsp))
#+END_SRC

